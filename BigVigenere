import java.io.*;

public class BigVigenere {
    private final char[][] alphabet;
    private final int[] key;

    public BigVigenere() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Ingrese una key: ");
        String clave = br.readLine();
        this.key = parseKey(clave);
        this.alphabet = generar_alfabeto();
    }

    public BigVigenere(String numericKey) {
        if (numericKey == null || numericKey.isEmpty()) {
            throw new IllegalArgumentException("La clave no puede estar vacía");
        }
        if (!numericKey.matches("\\d+")) {
            throw new IllegalArgumentException("La clave debe contener solo dígitos");
        }
        this.key = parseKey(numericKey);
        this.alphabet = generar_alfabeto();
    }

    private int[] parseKey(String keyStr) {
        int[] result = new int[keyStr.length()];
        for (int i = 0; i < keyStr.length(); i++) {
            result[i] = Character.getNumericValue(keyStr.charAt(i));
        }
        return result;
    }

    private char[][] generar_alfabeto() {
        char[][] alphabet = new char[64][64];
        char currentChar = 'a';
        for (int i = 0; i < 64; i++) {
            char c = currentChar;
            for (int j = 0; j < 64; j++) {
                alphabet[i][j] = c;
                c = getNextChar(c);
            }
            currentChar = getNextChar(currentChar);
        }
        return alphabet;
    }

    private char getNextChar(char c) {
        switch (c) {
            case 'n': return 'ñ';
            case 'ñ': return 'o';
            case 'N': return 'Ñ';
            case 'Ñ': return 'O';
            case 'z': return 'A';
            case 'Z': return '0';
            case '9': return 'a';
            default: return (char)(c + 1);
        }
    }

    public String encrypt(String message) {
        if (message == null) return "";

        StringBuilder encryptMessage = new StringBuilder();
        int keyIndex = 0;
        for (int i = 0; i < message.length(); i++) {
            char currentChar = message.charAt(i);
            if (currentChar == ' ') {
                encryptMessage.append(' ');
                continue;
            }
            int load = getLoadValue(currentChar);
            if (load == -1) continue;
            for (int j = load; j < 64; j++) {
                if (currentChar == alphabet[0][j]) {
                    int k = key[keyIndex] + 54;
                    encryptMessage.append(alphabet[k][j]);
                    break;
                }
            }
            keyIndex = (keyIndex + 1) % key.length;
        }
        return encryptMessage.toString();
    }
    public String decrypt(String encryptedMessage) {
        if (encryptedMessage == null) return "";

        StringBuilder decryptMessage = new StringBuilder();
        int keyIndex = 0;
        for (int i = 0; i < encryptedMessage.length(); i++) {
            char currentChar = encryptedMessage.charAt(i);
            if (currentChar == ' ') {
                decryptMessage.append(' ');
                continue;
            }
            int k = key[keyIndex] + 54;
            for (int j = 0; j < 64; j++) {
                if (currentChar == alphabet[k][j]) {
                    decryptMessage.append(alphabet[0][j]);
                    break;
                }
            }
            keyIndex = (keyIndex + 1) % key.length;
        }
        return decryptMessage.toString();
    }

    private int getLoadValue(char c) {
        if (c >= 'a' && c <= 'z') return 0;
        if (c == 'ñ') return 0;
        if (c >= 'A' && c <= 'Z') return 27;
        if (c == 'Ñ') return 27;
        if (c >= '0' && c <= '9') return 54;
        return -1;
    }

    public void reEncrypt() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Ingresar mensaje encriptado: ");
        String encryptedMessage = br.readLine();

        if (encryptedMessage == null || encryptedMessage.trim().isEmpty()) {
            System.out.println("El mensaje encriptado no puede estar vacío.");
            return;
        }

        String decryptedMessage = this.decrypt(encryptedMessage);
        System.out.print("Ingrese nueva clave (solo dígitos): ");
        String nuevaClave = br.readLine();

        if (!nuevaClave.matches("\\d+")) {
            System.out.println("Error: La clave debe contener solo dígitos.");
            return;
        }

        BigVigenere newVigenere = new BigVigenere(nuevaClave);
        String newMessage = newVigenere.encrypt(decryptedMessage);
        System.out.println("Nuevo mensaje encriptado: " + newMessage);
    }

    public char search(int position) {
        if (position < 0 || position >= 64 * 64) {
            throw new IllegalArgumentException("Posición fuera del rango válido");
        }
        int row = position / 64;
        int col = position % 64;
        return alphabet[row][col];
    }
    public char optimalSearch(int position) {
        return search(position);
    }

    public static String simpleVigenere(String message, String key) {
        StringBuilder result = new StringBuilder();
        key = key.toLowerCase();
        int keyIndex = 0;

        for (char c : message.toCharArray()) {
            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                int shift = key.charAt(keyIndex % key.length()) - 'a';
                char encrypted = (char) ((c - base + shift) % 26 + base);
                result.append(encrypted);
                keyIndex++;
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }

   
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BigVigenere vigenere = new BigVigenere();

    while (true) {
        System.out.println("\n--- MENÚ ---");
        System.out.println("1. Cifrar mensaje");
        System.out.println("2. Descifrar mensaje");
        System.out.println("3. Re-encriptar con nueva clave");
        System.out.println("4. Buscar carácter por posición (search)");
        System.out.println("5. Buscar carácter por posición (optimalSearch)");
        System.out.println("6. Salir");
        System.out.print("Opción: ");
        String opcion = br.readLine();

        switch (opcion) {
            case "1":
                System.out.print("Ingrese el mensaje a cifrar: ");
                String mensaje = br.readLine();

                long startEncrypt = System.nanoTime();
                String cifrado = vigenere.encrypt(mensaje);
                long endEncrypt = System.nanoTime();
                double tiempoEncrypt = (endEncrypt - startEncrypt) / 1_000_000.0;

                System.out.println("Mensaje cifrado: " + cifrado);
                System.out.printf("Tiempo de ejecución: %.3f ms\n", tiempoEncrypt);
                break;

            case "2":
                System.out.print("Ingrese el mensaje cifrado: ");
                String encriptado = br.readLine();

                long startDecrypt = System.nanoTime();
                String descifrado = vigenere.decrypt(encriptado);
                long endDecrypt = System.nanoTime();
                double tiempoDecrypt = (endDecrypt - startDecrypt) / 1_000_000.0;

                System.out.println("Mensaje descifrado: " + descifrado);
                System.out.printf("Tiempo de ejecución: %.3f ms\n", tiempoDecrypt);
                break;

            case "3":
                long startReencrypt = System.nanoTime();
                vigenere.reEncrypt();
                long endReencrypt = System.nanoTime();
                double tiempoReencrypt = (endReencrypt - startReencrypt) / 1_000_000.0;
                System.out.printf("Tiempo de ejecución del re-encriptado: %.3f ms\n", tiempoReencrypt);
                break;

            case "4":
                System.out.print("Ingrese posición (0 a 4095): ");
                int pos1 = Integer.parseInt(br.readLine());
                try {
                    char c1 = vigenere.search(pos1);
                    System.out.println("Carácter en posición " + pos1 + ": " + c1);
                } catch (Exception e) {
                    System.out.println("Error: " + e.getMessage());
                }
                break;

            case "5":
                System.out.print("Ingrese posición (0 a 4095): ");
                int pos2 = Integer.parseInt(br.readLine());
                try {
                    char c2 = vigenere.optimalSearch(pos2);
                    System.out.println("Carácter en posición " + pos2 + ": " + c2);
                } catch (Exception e) {
                    System.out.println("Error: " + e.getMessage());
                }
                break;

            case "6":
                System.out.println("Saliendo...");
                return;

            default:
                System.out.println("Opción inválida.");
        }
    }
}
}
